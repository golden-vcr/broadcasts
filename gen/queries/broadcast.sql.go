// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0
// source: broadcast.sql

package queries

import (
	"context"
	"database/sql"
	"encoding/json"
	"time"
)

const endBroadcast = `-- name: EndBroadcast :execresult
update broadcasts.broadcast set ended_at = now()
where broadcast.id = $1
    and broadcast.ended_at is null
`

func (q *Queries) EndBroadcast(ctx context.Context, broadcastID int32) (sql.Result, error) {
	return q.db.ExecContext(ctx, endBroadcast, broadcastID)
}

const getBroadcastData = `-- name: GetBroadcastData :many
select
    broadcast.id,
    broadcast.started_at,
    broadcast.ended_at,
    coalesce(
        json_agg(json_build_object(
            'tape_id', screening.tape_id,
            'started_at', screening.started_at,
            'ended_at', coalesce(screening.ended_at, broadcast.ended_at)
        )) filter (where screening.id is not null),
        '[]'::json
     )::json as screenings
from broadcasts.broadcast
left join broadcasts.screening
    on screening.broadcast_id = broadcast.id
where broadcast.id < coalesce($1, 2147483647)
group by broadcast.id
order by broadcast.id desc
limit coalesce($2::integer, 10)
`

type GetBroadcastDataParams struct {
	BeforeBroadcastID sql.NullInt32
	Limit             sql.NullInt32
}

type GetBroadcastDataRow struct {
	ID         int32
	StartedAt  time.Time
	EndedAt    sql.NullTime
	Screenings json.RawMessage
}

func (q *Queries) GetBroadcastData(ctx context.Context, arg GetBroadcastDataParams) ([]GetBroadcastDataRow, error) {
	rows, err := q.db.QueryContext(ctx, getBroadcastData, arg.BeforeBroadcastID, arg.Limit)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetBroadcastDataRow
	for rows.Next() {
		var i GetBroadcastDataRow
		if err := rows.Scan(
			&i.ID,
			&i.StartedAt,
			&i.EndedAt,
			&i.Screenings,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const resumeBroadcast = `-- name: ResumeBroadcast :execresult
update broadcasts.broadcast set ended_at = null
where broadcast.id = $1
    and broadcast.ended_at is not null
`

func (q *Queries) ResumeBroadcast(ctx context.Context, broadcastID int32) (sql.Result, error) {
	return q.db.ExecContext(ctx, resumeBroadcast, broadcastID)
}

const startBroadcast = `-- name: StartBroadcast :one
insert into broadcasts.broadcast (started_at)
values (now())
returning broadcast.id, broadcast.started_at
`

type StartBroadcastRow struct {
	ID        int32
	StartedAt time.Time
}

func (q *Queries) StartBroadcast(ctx context.Context) (StartBroadcastRow, error) {
	row := q.db.QueryRowContext(ctx, startBroadcast)
	var i StartBroadcastRow
	err := row.Scan(&i.ID, &i.StartedAt)
	return i, err
}
