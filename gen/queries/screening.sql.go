// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0
// source: screening.sql

package queries

import (
	"context"
	"database/sql"
	"time"

	"github.com/google/uuid"
)

const endScreening = `-- name: EndScreening :execresult
update broadcasts.screening set ended_at = now()
where screening.id = $1
    and screening.ended_at is null
`

func (q *Queries) EndScreening(ctx context.Context, screeningID uuid.UUID) (sql.Result, error) {
	return q.db.ExecContext(ctx, endScreening, screeningID)
}

const startScreening = `-- name: StartScreening :one
insert into broadcasts.screening (
    id,
    broadcast_id,
    tape_id,
    started_at
) values (
    gen_random_uuid(),
    $1,
    $2,
    now()
)
returning screening.id, screening.started_at
`

type StartScreeningParams struct {
	BroadcastID int32
	TapeID      int32
}

type StartScreeningRow struct {
	ID        uuid.UUID
	StartedAt time.Time
}

func (q *Queries) StartScreening(ctx context.Context, arg StartScreeningParams) (StartScreeningRow, error) {
	row := q.db.QueryRowContext(ctx, startScreening, arg.BroadcastID, arg.TapeID)
	var i StartScreeningRow
	err := row.Scan(&i.ID, &i.StartedAt)
	return i, err
}
